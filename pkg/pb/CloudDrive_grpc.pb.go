// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/pb/CloudDrive.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudDriveFileSrv_GetSystemInfo_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/GetSystemInfo"
	CloudDriveFileSrv_GetToken_FullMethodName                        = "/clouddrive.CloudDriveFileSrv/GetToken"
	CloudDriveFileSrv_Login_FullMethodName                           = "/clouddrive.CloudDriveFileSrv/Login"
	CloudDriveFileSrv_Register_FullMethodName                        = "/clouddrive.CloudDriveFileSrv/Register"
	CloudDriveFileSrv_SendResetAccountEmail_FullMethodName           = "/clouddrive.CloudDriveFileSrv/SendResetAccountEmail"
	CloudDriveFileSrv_ResetAccount_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/ResetAccount"
	CloudDriveFileSrv_SendConfirmEmail_FullMethodName                = "/clouddrive.CloudDriveFileSrv/SendConfirmEmail"
	CloudDriveFileSrv_ConfirmEmail_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/ConfirmEmail"
	CloudDriveFileSrv_GetAccountStatus_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetAccountStatus"
	CloudDriveFileSrv_GetSubFiles_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/GetSubFiles"
	CloudDriveFileSrv_GetSearchResults_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetSearchResults"
	CloudDriveFileSrv_FindFileByPath_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/FindFileByPath"
	CloudDriveFileSrv_CreateFolder_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/CreateFolder"
	CloudDriveFileSrv_CreateEncryptedFolder_FullMethodName           = "/clouddrive.CloudDriveFileSrv/CreateEncryptedFolder"
	CloudDriveFileSrv_UnlockEncryptedFile_FullMethodName             = "/clouddrive.CloudDriveFileSrv/UnlockEncryptedFile"
	CloudDriveFileSrv_LockEncryptedFile_FullMethodName               = "/clouddrive.CloudDriveFileSrv/LockEncryptedFile"
	CloudDriveFileSrv_RenameFile_FullMethodName                      = "/clouddrive.CloudDriveFileSrv/RenameFile"
	CloudDriveFileSrv_RenameFiles_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/RenameFiles"
	CloudDriveFileSrv_MoveFile_FullMethodName                        = "/clouddrive.CloudDriveFileSrv/MoveFile"
	CloudDriveFileSrv_CopyFile_FullMethodName                        = "/clouddrive.CloudDriveFileSrv/CopyFile"
	CloudDriveFileSrv_DeleteFile_FullMethodName                      = "/clouddrive.CloudDriveFileSrv/DeleteFile"
	CloudDriveFileSrv_DeleteFilePermanently_FullMethodName           = "/clouddrive.CloudDriveFileSrv/DeleteFilePermanently"
	CloudDriveFileSrv_DeleteFiles_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/DeleteFiles"
	CloudDriveFileSrv_DeleteFilesPermanently_FullMethodName          = "/clouddrive.CloudDriveFileSrv/DeleteFilesPermanently"
	CloudDriveFileSrv_AddOfflineFiles_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/AddOfflineFiles"
	CloudDriveFileSrv_RemoveOfflineFiles_FullMethodName              = "/clouddrive.CloudDriveFileSrv/RemoveOfflineFiles"
	CloudDriveFileSrv_ListOfflineFilesByPath_FullMethodName          = "/clouddrive.CloudDriveFileSrv/ListOfflineFilesByPath"
	CloudDriveFileSrv_ListAllOfflineFiles_FullMethodName             = "/clouddrive.CloudDriveFileSrv/ListAllOfflineFiles"
	CloudDriveFileSrv_AddSharedLink_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/AddSharedLink"
	CloudDriveFileSrv_GetFileDetailProperties_FullMethodName         = "/clouddrive.CloudDriveFileSrv/GetFileDetailProperties"
	CloudDriveFileSrv_GetSpaceInfo_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/GetSpaceInfo"
	CloudDriveFileSrv_GetCloudMemberships_FullMethodName             = "/clouddrive.CloudDriveFileSrv/GetCloudMemberships"
	CloudDriveFileSrv_GetRuntimeInfo_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/GetRuntimeInfo"
	CloudDriveFileSrv_GetRunningInfo_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/GetRunningInfo"
	CloudDriveFileSrv_Logout_FullMethodName                          = "/clouddrive.CloudDriveFileSrv/Logout"
	CloudDriveFileSrv_CanAddMoreMountPoints_FullMethodName           = "/clouddrive.CloudDriveFileSrv/CanAddMoreMountPoints"
	CloudDriveFileSrv_GetMountPoints_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/GetMountPoints"
	CloudDriveFileSrv_AddMountPoint_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/AddMountPoint"
	CloudDriveFileSrv_RemoveMountPoint_FullMethodName                = "/clouddrive.CloudDriveFileSrv/RemoveMountPoint"
	CloudDriveFileSrv_Mount_FullMethodName                           = "/clouddrive.CloudDriveFileSrv/Mount"
	CloudDriveFileSrv_Unmount_FullMethodName                         = "/clouddrive.CloudDriveFileSrv/Unmount"
	CloudDriveFileSrv_UpdateMountPoint_FullMethodName                = "/clouddrive.CloudDriveFileSrv/UpdateMountPoint"
	CloudDriveFileSrv_GetAvailableDriveLetters_FullMethodName        = "/clouddrive.CloudDriveFileSrv/GetAvailableDriveLetters"
	CloudDriveFileSrv_HasDriveLetters_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/HasDriveLetters"
	CloudDriveFileSrv_CanMountBothLocalAndCloud_FullMethodName       = "/clouddrive.CloudDriveFileSrv/CanMountBothLocalAndCloud"
	CloudDriveFileSrv_LocalGetSubFiles_FullMethodName                = "/clouddrive.CloudDriveFileSrv/LocalGetSubFiles"
	CloudDriveFileSrv_GetAllTasksCount_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetAllTasksCount"
	CloudDriveFileSrv_GetDownloadFileCount_FullMethodName            = "/clouddrive.CloudDriveFileSrv/GetDownloadFileCount"
	CloudDriveFileSrv_GetDownloadFileList_FullMethodName             = "/clouddrive.CloudDriveFileSrv/GetDownloadFileList"
	CloudDriveFileSrv_GetUploadFileCount_FullMethodName              = "/clouddrive.CloudDriveFileSrv/GetUploadFileCount"
	CloudDriveFileSrv_GetUploadFileList_FullMethodName               = "/clouddrive.CloudDriveFileSrv/GetUploadFileList"
	CloudDriveFileSrv_CancelAllUploadFiles_FullMethodName            = "/clouddrive.CloudDriveFileSrv/CancelAllUploadFiles"
	CloudDriveFileSrv_CancelUploadFiles_FullMethodName               = "/clouddrive.CloudDriveFileSrv/CancelUploadFiles"
	CloudDriveFileSrv_PauseAllUploadFiles_FullMethodName             = "/clouddrive.CloudDriveFileSrv/PauseAllUploadFiles"
	CloudDriveFileSrv_PauseUploadFiles_FullMethodName                = "/clouddrive.CloudDriveFileSrv/PauseUploadFiles"
	CloudDriveFileSrv_ResumeAllUploadFiles_FullMethodName            = "/clouddrive.CloudDriveFileSrv/ResumeAllUploadFiles"
	CloudDriveFileSrv_ResumeUploadFiles_FullMethodName               = "/clouddrive.CloudDriveFileSrv/ResumeUploadFiles"
	CloudDriveFileSrv_GetCopyTasks_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/GetCopyTasks"
	CloudDriveFileSrv_CancelCopyTask_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/CancelCopyTask"
	CloudDriveFileSrv_PauseCopyTask_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/PauseCopyTask"
	CloudDriveFileSrv_RestartCopyTask_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/RestartCopyTask"
	CloudDriveFileSrv_RemoveCompletedCopyTasks_FullMethodName        = "/clouddrive.CloudDriveFileSrv/RemoveCompletedCopyTasks"
	CloudDriveFileSrv_CanAddMoreCloudApis_FullMethodName             = "/clouddrive.CloudDriveFileSrv/CanAddMoreCloudApis"
	CloudDriveFileSrv_APILogin115Editthiscookie_FullMethodName       = "/clouddrive.CloudDriveFileSrv/APILogin115Editthiscookie"
	CloudDriveFileSrv_APILogin115QRCode_FullMethodName               = "/clouddrive.CloudDriveFileSrv/APILogin115QRCode"
	CloudDriveFileSrv_APILogin115OpenQRCode_FullMethodName           = "/clouddrive.CloudDriveFileSrv/APILogin115OpenQRCode"
	CloudDriveFileSrv_APILoginAliyundriveOAuth_FullMethodName        = "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveOAuth"
	CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_FullMethodName = "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveRefreshtoken"
	CloudDriveFileSrv_APILoginAliyunDriveQRCode_FullMethodName       = "/clouddrive.CloudDriveFileSrv/APILoginAliyunDriveQRCode"
	CloudDriveFileSrv_APILoginBaiduPanOAuth_FullMethodName           = "/clouddrive.CloudDriveFileSrv/APILoginBaiduPanOAuth"
	CloudDriveFileSrv_APILoginOneDriveOAuth_FullMethodName           = "/clouddrive.CloudDriveFileSrv/APILoginOneDriveOAuth"
	CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_FullMethodName        = "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveOAuth"
	CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_FullMethodName = "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveRefreshToken"
	CloudDriveFileSrv_ApiLoginXunleiOAuth_FullMethodName             = "/clouddrive.CloudDriveFileSrv/ApiLoginXunleiOAuth"
	CloudDriveFileSrv_ApiLogin123PanOAuth_FullMethodName             = "/clouddrive.CloudDriveFileSrv/ApiLogin123panOAuth"
	CloudDriveFileSrv_APILogin189QRCode_FullMethodName               = "/clouddrive.CloudDriveFileSrv/APILogin189QRCode"
	CloudDriveFileSrv_APILoginWebDav_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/APILoginWebDav"
	CloudDriveFileSrv_APIAddLocalFolder_FullMethodName               = "/clouddrive.CloudDriveFileSrv/APIAddLocalFolder"
	CloudDriveFileSrv_RemoveCloudAPI_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/RemoveCloudAPI"
	CloudDriveFileSrv_GetAllCloudApis_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/GetAllCloudApis"
	CloudDriveFileSrv_GetCloudAPIConfig_FullMethodName               = "/clouddrive.CloudDriveFileSrv/GetCloudAPIConfig"
	CloudDriveFileSrv_SetCloudAPIConfig_FullMethodName               = "/clouddrive.CloudDriveFileSrv/SetCloudAPIConfig"
	CloudDriveFileSrv_GetSystemSettings_FullMethodName               = "/clouddrive.CloudDriveFileSrv/GetSystemSettings"
	CloudDriveFileSrv_SetSystemSettings_FullMethodName               = "/clouddrive.CloudDriveFileSrv/SetSystemSettings"
	CloudDriveFileSrv_SetDirCacheTimeSecs_FullMethodName             = "/clouddrive.CloudDriveFileSrv/SetDirCacheTimeSecs"
	CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_FullMethodName    = "/clouddrive.CloudDriveFileSrv/GetEffectiveDirCacheTimeSecs"
	CloudDriveFileSrv_ForceExpireDirCache_FullMethodName             = "/clouddrive.CloudDriveFileSrv/ForceExpireDirCache"
	CloudDriveFileSrv_GetOpenFileTable_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetOpenFileTable"
	CloudDriveFileSrv_GetDirCacheTable_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetDirCacheTable"
	CloudDriveFileSrv_GetReferencedEntryPaths_FullMethodName         = "/clouddrive.CloudDriveFileSrv/GetReferencedEntryPaths"
	CloudDriveFileSrv_GetTempFileTable_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetTempFileTable"
	CloudDriveFileSrv_PushTaskChange_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/PushTaskChange"
	CloudDriveFileSrv_PushMessage_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/PushMessage"
	CloudDriveFileSrv_GetCloudDrive1UserData_FullMethodName          = "/clouddrive.CloudDriveFileSrv/GetCloudDrive1UserData"
	CloudDriveFileSrv_RestartService_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/RestartService"
	CloudDriveFileSrv_ShutdownService_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/ShutdownService"
	CloudDriveFileSrv_HasUpdate_FullMethodName                       = "/clouddrive.CloudDriveFileSrv/HasUpdate"
	CloudDriveFileSrv_CheckUpdate_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/CheckUpdate"
	CloudDriveFileSrv_DownloadUpdate_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/DownloadUpdate"
	CloudDriveFileSrv_UpdateSystem_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/UpdateSystem"
	CloudDriveFileSrv_TestUpdate_FullMethodName                      = "/clouddrive.CloudDriveFileSrv/TestUpdate"
	CloudDriveFileSrv_GetMetaData_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/GetMetaData"
	CloudDriveFileSrv_GetOriginalPath_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/GetOriginalPath"
	CloudDriveFileSrv_ChangePassword_FullMethodName                  = "/clouddrive.CloudDriveFileSrv/ChangePassword"
	CloudDriveFileSrv_CreateFile_FullMethodName                      = "/clouddrive.CloudDriveFileSrv/CreateFile"
	CloudDriveFileSrv_CloseFile_FullMethodName                       = "/clouddrive.CloudDriveFileSrv/CloseFile"
	CloudDriveFileSrv_WriteToFileStream_FullMethodName               = "/clouddrive.CloudDriveFileSrv/WriteToFileStream"
	CloudDriveFileSrv_WriteToFile_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/WriteToFile"
	CloudDriveFileSrv_GetPromotions_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/GetPromotions"
	CloudDriveFileSrv_UpdatePromotionResult_FullMethodName           = "/clouddrive.CloudDriveFileSrv/UpdatePromotionResult"
	CloudDriveFileSrv_GetCloudDrivePlans_FullMethodName              = "/clouddrive.CloudDriveFileSrv/GetCloudDrivePlans"
	CloudDriveFileSrv_JoinPlan_FullMethodName                        = "/clouddrive.CloudDriveFileSrv/JoinPlan"
	CloudDriveFileSrv_BindCloudAccount_FullMethodName                = "/clouddrive.CloudDriveFileSrv/BindCloudAccount"
	CloudDriveFileSrv_TransferBalance_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/TransferBalance"
	CloudDriveFileSrv_ChangeEmail_FullMethodName                     = "/clouddrive.CloudDriveFileSrv/ChangeEmail"
	CloudDriveFileSrv_GetBalanceLog_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/GetBalanceLog"
	CloudDriveFileSrv_CheckActivationCode_FullMethodName             = "/clouddrive.CloudDriveFileSrv/CheckActivationCode"
	CloudDriveFileSrv_ActivatePlan_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/ActivatePlan"
	CloudDriveFileSrv_CheckCouponCode_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/CheckCouponCode"
	CloudDriveFileSrv_GetReferralCode_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/GetReferralCode"
	CloudDriveFileSrv_BackupGetAll_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/BackupGetAll"
	CloudDriveFileSrv_BackupGetStatus_FullMethodName                 = "/clouddrive.CloudDriveFileSrv/BackupGetStatus"
	CloudDriveFileSrv_BackupAdd_FullMethodName                       = "/clouddrive.CloudDriveFileSrv/BackupAdd"
	CloudDriveFileSrv_BackupRemove_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/BackupRemove"
	CloudDriveFileSrv_BackupUpdate_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/BackupUpdate"
	CloudDriveFileSrv_BackupAddDestination_FullMethodName            = "/clouddrive.CloudDriveFileSrv/BackupAddDestination"
	CloudDriveFileSrv_BackupRemoveDestination_FullMethodName         = "/clouddrive.CloudDriveFileSrv/BackupRemoveDestination"
	CloudDriveFileSrv_BackupSetEnabled_FullMethodName                = "/clouddrive.CloudDriveFileSrv/BackupSetEnabled"
	CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_FullMethodName = "/clouddrive.CloudDriveFileSrv/BackupSetFileSystemWatchEnabled"
	CloudDriveFileSrv_BackupUpdateStrategies_FullMethodName          = "/clouddrive.CloudDriveFileSrv/BackupUpdateStrategies"
	CloudDriveFileSrv_BackupRestartWalkingThrough_FullMethodName     = "/clouddrive.CloudDriveFileSrv/BackupRestartWalkingThrough"
	CloudDriveFileSrv_CanAddMoreBackups_FullMethodName               = "/clouddrive.CloudDriveFileSrv/CanAddMoreBackups"
	CloudDriveFileSrv_GetMachineId_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/GetMachineId"
	CloudDriveFileSrv_GetOnlineDevices_FullMethodName                = "/clouddrive.CloudDriveFileSrv/GetOnlineDevices"
	CloudDriveFileSrv_KickoutDevice_FullMethodName                   = "/clouddrive.CloudDriveFileSrv/KickoutDevice"
	CloudDriveFileSrv_ListLogFiles_FullMethodName                    = "/clouddrive.CloudDriveFileSrv/ListLogFiles"
	CloudDriveFileSrv_SyncFileChangesFromCloud_FullMethodName        = "/clouddrive.CloudDriveFileSrv/SyncFileChangesFromCloud"
	CloudDriveFileSrv_StartCloudEventListener_FullMethodName         = "/clouddrive.CloudDriveFileSrv/StartCloudEventListener"
	CloudDriveFileSrv_StopCloudEventListener_FullMethodName          = "/clouddrive.CloudDriveFileSrv/StopCloudEventListener"
	CloudDriveFileSrv_WalkThroughFolderTest_FullMethodName           = "/clouddrive.CloudDriveFileSrv/WalkThroughFolderTest"
	CloudDriveFileSrv_GetWebhookConfigTemplate_FullMethodName        = "/clouddrive.CloudDriveFileSrv/GetWebhookConfigTemplate"
	CloudDriveFileSrv_GetWebhookConfigs_FullMethodName               = "/clouddrive.CloudDriveFileSrv/GetWebhookConfigs"
	CloudDriveFileSrv_AddWebhookConfig_FullMethodName                = "/clouddrive.CloudDriveFileSrv/AddWebhookConfig"
	CloudDriveFileSrv_RemoveWebhookConfig_FullMethodName             = "/clouddrive.CloudDriveFileSrv/RemoveWebhookConfig"
	CloudDriveFileSrv_ChangeWebhookConfig_FullMethodName             = "/clouddrive.CloudDriveFileSrv/ChangeWebhookConfig"
)

// CloudDriveFileSrvClient is the client API for CloudDriveFileSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudDriveFileSrvClient interface {
	// public methods, no authorization is required
	// returns if clouddrive has logged in to cloudfs server and the user name
	GetSystemInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudDriveSystemInfo, error)
	// get bearer token by username and password
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*JWTToken, error)
	// login to cloudfs server
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// register a new count
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// asks cloudfs server to send reset account email with reset link
	SendResetAccountEmail(ctx context.Context, in *SendResetAccountEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// reset account's data, set new password, with received reset code from email
	ResetAccount(ctx context.Context, in *ResetAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// authorized methods, Authorization header with Bearer {token} is requirerd
	// asks cloudfs server to send confirm email with confirm link
	SendConfirmEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// confirm email by confirm code
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get account status
	GetAccountStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountStatusResult, error)
	// get all subfiles by path
	GetSubFiles(ctx context.Context, in *ListSubFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubFilesReply], error)
	// search under path
	GetSearchResults(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubFilesReply], error)
	// find file info by full path
	FindFileByPath(ctx context.Context, in *FindFileByPathRequest, opts ...grpc.CallOption) (*CloudDriveFile, error)
	// create a folder under path
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error)
	// create an encrypted folder under path
	CreateEncryptedFolder(ctx context.Context, in *CreateEncryptedFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error)
	// unlock an encrypted folder/file by setting password
	UnlockEncryptedFile(ctx context.Context, in *UnlockEncryptedFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// lock an encrypted folder/file by clearing password
	LockEncryptedFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// rename a single file
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch rename files
	RenameFiles(ctx context.Context, in *RenameFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// move files to a dest folder
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// copy files to a dest folder
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// delete a single file
	DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// delete a single file permanently, only aliyundrive supports this currently
	DeleteFilePermanently(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch delete files
	DeleteFiles(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch delete files permanently, only aliyundrive supports this currently
	DeleteFilesPermanently(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// add offline files by providing magnet, sha1, ..., applies only with folders
	// with canOfflineDownload is true
	AddOfflineFiles(ctx context.Context, in *AddOfflineFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// remove offline files by info hash
	RemoveOfflineFiles(ctx context.Context, in *RemoveOfflineFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// list offline files
	ListOfflineFilesByPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*OfflineFileListResult, error)
	// list all offline files of a cloud with pagination
	ListAllOfflineFiles(ctx context.Context, in *OfflineFileListAllRequest, opts ...grpc.CallOption) (*OfflineFileListAllResult, error)
	// add shared link to a folder
	AddSharedLink(ctx context.Context, in *AddSharedLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get folder properties, applies only with folders with hasDetailProperties
	// is true
	GetFileDetailProperties(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileDetailProperties, error)
	// get total/free/used space of a cloud path
	GetSpaceInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*SpaceInfo, error)
	// get cloud account memberships
	GetCloudMemberships(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*CloudMemberships, error)
	// get server runtime info
	GetRuntimeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuntimeInfo, error)
	// get server stats, including cpu/mem/uptime
	GetRunningInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunInfo, error)
	// logout from cloudfs server
	Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// check if current user can add more mount point
	CanAddMoreMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
	// get all mount points
	GetMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMountPointsResult, error)
	// add a new mount point
	AddMountPoint(ctx context.Context, in *MountOption, opts ...grpc.CallOption) (*MountPointResult, error)
	// remove a mountpoint
	RemoveMountPoint(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// mount a mount point
	Mount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// unmount a mount point
	Unmount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// change mount point settings
	UpdateMountPoint(ctx context.Context, in *UpdateMountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// get all unused drive letters from server's local storage, applies to
	// windows only
	GetAvailableDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableDriveLettersResult, error)
	// check if server has driver letters, returns true only on windows
	HasDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HasDriveLettersResult, error)
	// check if server can mount both local and cloud drives
	CanMountBothLocalAndCloud(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoolResult, error)
	// get subfiles of a local path, used for adding mountpoint from web ui
	LocalGetSubFiles(ctx context.Context, in *LocalGetSubFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocalGetSubFilesResult], error)
	// get all transfer tasks' count
	GetAllTasksCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTasksCountResult, error)
	// get download tasks' count
	GetDownloadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileCountResult, error)
	// get all download tasks
	GetDownloadFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileListResult, error)
	// get all upload tasks' count
	GetUploadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUploadFileCountResult, error)
	// get upload tasks, paged by providing page number and items per page and
	// file name filter
	GetUploadFileList(ctx context.Context, in *GetUploadFileListRequest, opts ...grpc.CallOption) (*GetUploadFileListResult, error)
	// cancel all upload tasks
	CancelAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// cancel selected upload tasks
	CancelUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// pause all upload tasks
	PauseAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// pause selected upload tasks
	PauseUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// resume all upload tasks
	ResumeAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// resume selected upload tasks
	ResumeUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all system tasks
	GetCopyTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCopyTaskResult, error)
	// cancel copy folder task
	CancelCopyTask(ctx context.Context, in *CopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// pause copy folder task
	PauseCopyTask(ctx context.Context, in *PauseCopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove all completed copy tasks
	// restart copy folder task
	RestartCopyTask(ctx context.Context, in *CopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCompletedCopyTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// check if current user can add more cloud apis
	CanAddMoreCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
	// add 115 cloud with editthiscookie
	APILogin115Editthiscookie(ctx context.Context, in *Login115EditthiscookieRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add 115 cloud with qr scanning
	APILogin115QRCode(ctx context.Context, in *Login115QrCodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error)
	// add 115 open with qr scanning
	APILogin115OpenQRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error)
	// add AliyunDriveOpen with OAuth result
	APILoginAliyundriveOAuth(ctx context.Context, in *LoginAliyundriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add AliyunDrive with refresh token
	APILoginAliyundriveRefreshtoken(ctx context.Context, in *LoginAliyundriveRefreshtokenRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add AliyunDrive with qr scanning
	APILoginAliyunDriveQRCode(ctx context.Context, in *LoginAliyundriveQRCodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error)
	// add BaiduPan with OAuth result
	APILoginBaiduPanOAuth(ctx context.Context, in *LoginBaiduPanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add OneDrive with OAuth result
	APILoginOneDriveOAuth(ctx context.Context, in *LoginOneDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Google Drive with OAuth result
	ApiLoginGoogleDriveOAuth(ctx context.Context, in *LoginGoogleDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Google Drive with refresh token
	ApiLoginGoogleDriveRefreshToken(ctx context.Context, in *LoginGoogleDriveRefreshTokenRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Xunlei Drive with OAuth result
	ApiLoginXunleiOAuth(ctx context.Context, in *LoginXunleiOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add 123 cloud with client id and client secret
	ApiLogin123PanOAuth(ctx context.Context, in *Login123PanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add 189 cloud with qr scanning
	APILogin189QRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error)
	// add PikPak cloud with username and password
	// rpc APILoginPikPak(UserLoginRequest) returns (APILoginResult) {}
	// add webdav
	APILoginWebDav(ctx context.Context, in *LoginWebDavRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add local folder
	APIAddLocalFolder(ctx context.Context, in *AddLocalFolderRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// remove a cloud
	RemoveCloudAPI(ctx context.Context, in *RemoveCloudAPIRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// get all cloud apis
	GetAllCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAPIList, error)
	// get CloudAPI configuration
	GetCloudAPIConfig(ctx context.Context, in *GetCloudAPIConfigRequest, opts ...grpc.CallOption) (*CloudAPIConfig, error)
	// set CloudAPI configuration
	SetCloudAPIConfig(ctx context.Context, in *SetCloudAPIConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all system setings value
	GetSystemSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemSettings, error)
	// set selected system settings value
	SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// set dir cache time
	SetDirCacheTimeSecs(ctx context.Context, in *SetDirCacheTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get dir cache time in effect (default value will be returned)
	GetEffectiveDirCacheTimeSecs(ctx context.Context, in *GetEffectiveDirCacheTimeRequest, opts ...grpc.CallOption) (*GetEffectiveDirCacheTimeResult, error)
	// force expire dir cache recursively
	ForceExpireDirCache(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get open file table
	GetOpenFileTable(ctx context.Context, in *GetOpenFileTableRequest, opts ...grpc.CallOption) (*OpenFileTable, error)
	// get dir cache table
	GetDirCacheTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirCacheTable, error)
	// get referenced entry paths of parent path
	GetReferencedEntryPaths(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringList, error)
	// get temp file table
	GetTempFileTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TempFileTable, error)
	// [deprecated] use PushMessage instead
	// push upload/download task count changes to client, also can be used for
	// client to detect conenction broken
	PushTaskChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllTasksCountResult], error)
	// general message notification
	PushMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CloudDrivePushMessage], error)
	// get CloudDrive1's user data string
	GetCloudDrive1UserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error)
	// restart service
	RestartService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// shutdown service
	ShutdownService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// check if has updates available
	HasUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error)
	// check software updates
	CheckUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error)
	// download newest version
	DownloadUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// update to newest version
	UpdateSystem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// test update process
	TestUpdate(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get file metadata
	GetMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileMetaData, error)
	// get file's original path from search result
	GetOriginalPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringResult, error)
	// change password
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// create a new file
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResult, error)
	// close an opened file
	CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// write a stream to an opened file
	WriteToFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteFileRequest, WriteFileResult], error)
	// write to an opened file
	WriteToFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResult, error)
	// get promotions
	GetPromotions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPromotionsResult, error)
	// update promotion result after purchased
	UpdatePromotionResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get cloudfs plans
	GetCloudDrivePlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloudDrivePlansResult, error)
	// join a plan
	JoinPlan(ctx context.Context, in *JoinPlanRequest, opts ...grpc.CallOption) (*JoinPlanResult, error)
	// bind account to a cloud account id
	BindCloudAccount(ctx context.Context, in *BindCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// transfer balance to another user
	TransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// change email
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// chech balance log
	GetBalanceLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceLogResult, error)
	// check activation code for a plan
	CheckActivationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*CheckActivationCodeResult, error)
	// Activate plan using an activation code
	ActivatePlan(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*JoinPlanResult, error)
	// check counpon code for a plan
	CheckCouponCode(ctx context.Context, in *CheckCouponCodeRequest, opts ...grpc.CallOption) (*CouponCodeResult, error)
	// get referral code of current user
	GetReferralCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringValue, error)
	// list all backups
	BackupGetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupList, error)
	// get backup status
	BackupGetStatus(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BackupStatus, error)
	// add a backup
	BackupAdd(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove a backup by it's source path
	BackupRemove(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// update a backup
	BackupUpdate(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// add destinations to a backup
	BackupAddDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove destinations from a backup
	BackupRemoveDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// enable/disable a backup
	BackupSetEnabled(ctx context.Context, in *BackupSetEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// enable/disable a backup's FileSystemWatch
	BackupSetFileSystemWatchEnabled(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// deprecated, use BackupUpdate instead
	BackupUpdateStrategies(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// restart a backup walking through
	BackupRestartWalkingThrough(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// check if current plan can support more backups
	CanAddMoreBackups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
	// get machine id
	GetMachineId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error)
	// get online devices
	GetOnlineDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OnlineDevices, error)
	// kickout a device
	KickoutDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// list log file names
	ListLogFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLogFileResult, error)
	// sync file changes from cloud
	SyncFileChangesFromCloud(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileSystemChangeStatistics, error)
	// start cloud events listener
	StartCloudEventListener(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// stop cloud events listener
	StopCloudEventListener(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// walk through folder test
	WalkThroughFolderTest(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*WalkThroughFolderResult, error)
	// get a webhook config template
	GetWebhookConfigTemplate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error)
	// list all webhook configs
	GetWebhookConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WebhookList, error)
	// add webhook config
	AddWebhookConfig(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove webhook config
	RemoveWebhookConfig(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// change webhook content
	ChangeWebhookConfig(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudDriveFileSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDriveFileSrvClient(cc grpc.ClientConnInterface) CloudDriveFileSrvClient {
	return &cloudDriveFileSrvClient{cc}
}

func (c *cloudDriveFileSrvClient) GetSystemInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudDriveSystemInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudDriveSystemInfo)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*JWTToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JWTToken)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SendResetAccountEmail(ctx context.Context, in *SendResetAccountEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SendResetAccountEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResetAccount(ctx context.Context, in *ResetAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ResetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SendConfirmEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SendConfirmEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ConfirmEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAccountStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountStatusResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountStatusResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetAccountStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSubFiles(ctx context.Context, in *ListSubFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubFilesReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[0], CloudDriveFileSrv_GetSubFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListSubFileRequest, SubFilesReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_GetSubFilesClient = grpc.ServerStreamingClient[SubFilesReply]

func (c *cloudDriveFileSrvClient) GetSearchResults(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubFilesReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[1], CloudDriveFileSrv_GetSearchResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, SubFilesReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_GetSearchResultsClient = grpc.ServerStreamingClient[SubFilesReply]

func (c *cloudDriveFileSrvClient) FindFileByPath(ctx context.Context, in *FindFileByPathRequest, opts ...grpc.CallOption) (*CloudDriveFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudDriveFile)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_FindFileByPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFolderResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CreateEncryptedFolder(ctx context.Context, in *CreateEncryptedFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFolderResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CreateEncryptedFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UnlockEncryptedFile(ctx context.Context, in *UnlockEncryptedFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_UnlockEncryptedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) LockEncryptedFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_LockEncryptedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RenameFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RenameFiles(ctx context.Context, in *RenameFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RenameFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CopyFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFilePermanently(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_DeleteFilePermanently_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFiles(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_DeleteFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFilesPermanently(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_DeleteFilesPermanently_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddOfflineFiles(ctx context.Context, in *AddOfflineFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_AddOfflineFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveOfflineFiles(ctx context.Context, in *RemoveOfflineFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RemoveOfflineFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ListOfflineFilesByPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*OfflineFileListResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfflineFileListResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ListOfflineFilesByPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ListAllOfflineFiles(ctx context.Context, in *OfflineFileListAllRequest, opts ...grpc.CallOption) (*OfflineFileListAllResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfflineFileListAllResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ListAllOfflineFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddSharedLink(ctx context.Context, in *AddSharedLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_AddSharedLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetFileDetailProperties(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileDetailProperties, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDetailProperties)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetFileDetailProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSpaceInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*SpaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpaceInfo)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetSpaceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudMemberships(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*CloudMemberships, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudMemberships)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetCloudMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetRuntimeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuntimeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuntimeInfo)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetRuntimeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetRunningInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunInfo)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetRunningInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CanAddMoreMountPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMountPointsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMountPointsResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetMountPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddMountPoint(ctx context.Context, in *MountOption, opts ...grpc.CallOption) (*MountPointResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_AddMountPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveMountPoint(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RemoveMountPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Mount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_Mount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Unmount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_Unmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdateMountPoint(ctx context.Context, in *UpdateMountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_UpdateMountPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAvailableDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableDriveLettersResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableDriveLettersResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetAvailableDriveLetters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) HasDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HasDriveLettersResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasDriveLettersResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_HasDriveLetters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanMountBothLocalAndCloud(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoolResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CanMountBothLocalAndCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) LocalGetSubFiles(ctx context.Context, in *LocalGetSubFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocalGetSubFilesResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[2], CloudDriveFileSrv_LocalGetSubFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LocalGetSubFilesRequest, LocalGetSubFilesResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_LocalGetSubFilesClient = grpc.ServerStreamingClient[LocalGetSubFilesResult]

func (c *cloudDriveFileSrvClient) GetAllTasksCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTasksCountResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTasksCountResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetAllTasksCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDownloadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileCountResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadFileCountResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetDownloadFileCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDownloadFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileListResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadFileListResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetDownloadFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetUploadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUploadFileCountResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadFileCountResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetUploadFileCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetUploadFileList(ctx context.Context, in *GetUploadFileListRequest, opts ...grpc.CallOption) (*GetUploadFileListResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadFileListResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetUploadFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CancelAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CancelAllUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CancelUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CancelUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PauseAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_PauseAllUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PauseUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_PauseUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResumeAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ResumeAllUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResumeUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ResumeUploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCopyTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCopyTaskResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCopyTaskResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetCopyTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CancelCopyTask(ctx context.Context, in *CopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CancelCopyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PauseCopyTask(ctx context.Context, in *PauseCopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_PauseCopyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RestartCopyTask(ctx context.Context, in *CopyTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RestartCopyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveCompletedCopyTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RemoveCompletedCopyTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CanAddMoreCloudApis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin115Editthiscookie(ctx context.Context, in *Login115EditthiscookieRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILogin115Editthiscookie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin115QRCode(ctx context.Context, in *Login115QrCodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[3], CloudDriveFileSrv_APILogin115QRCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Login115QrCodeRequest, QRCodeScanMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin115QRCodeClient = grpc.ServerStreamingClient[QRCodeScanMessage]

func (c *cloudDriveFileSrvClient) APILogin115OpenQRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[4], CloudDriveFileSrv_APILogin115OpenQRCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, QRCodeScanMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin115OpenQRCodeClient = grpc.ServerStreamingClient[QRCodeScanMessage]

func (c *cloudDriveFileSrvClient) APILoginAliyundriveOAuth(ctx context.Context, in *LoginAliyundriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILoginAliyundriveOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginAliyundriveRefreshtoken(ctx context.Context, in *LoginAliyundriveRefreshtokenRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginAliyunDriveQRCode(ctx context.Context, in *LoginAliyundriveQRCodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[5], CloudDriveFileSrv_APILoginAliyunDriveQRCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoginAliyundriveQRCodeRequest, QRCodeScanMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILoginAliyunDriveQRCodeClient = grpc.ServerStreamingClient[QRCodeScanMessage]

func (c *cloudDriveFileSrvClient) APILoginBaiduPanOAuth(ctx context.Context, in *LoginBaiduPanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILoginBaiduPanOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginOneDriveOAuth(ctx context.Context, in *LoginOneDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILoginOneDriveOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginGoogleDriveOAuth(ctx context.Context, in *LoginGoogleDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginGoogleDriveRefreshToken(ctx context.Context, in *LoginGoogleDriveRefreshTokenRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginXunleiOAuth(ctx context.Context, in *LoginXunleiOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ApiLoginXunleiOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLogin123PanOAuth(ctx context.Context, in *Login123PanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ApiLogin123PanOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin189QRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QRCodeScanMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[6], CloudDriveFileSrv_APILogin189QRCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, QRCodeScanMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin189QRCodeClient = grpc.ServerStreamingClient[QRCodeScanMessage]

func (c *cloudDriveFileSrvClient) APILoginWebDav(ctx context.Context, in *LoginWebDavRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APILoginWebDav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APIAddLocalFolder(ctx context.Context, in *AddLocalFolderRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_APIAddLocalFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveCloudAPI(ctx context.Context, in *RemoveCloudAPIRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RemoveCloudAPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAllCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAPIList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudAPIList)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetAllCloudApis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudAPIConfig(ctx context.Context, in *GetCloudAPIConfigRequest, opts ...grpc.CallOption) (*CloudAPIConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudAPIConfig)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetCloudAPIConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetCloudAPIConfig(ctx context.Context, in *SetCloudAPIConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SetCloudAPIConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSystemSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemSettings)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetSystemSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SetSystemSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetDirCacheTimeSecs(ctx context.Context, in *SetDirCacheTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SetDirCacheTimeSecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetEffectiveDirCacheTimeSecs(ctx context.Context, in *GetEffectiveDirCacheTimeRequest, opts ...grpc.CallOption) (*GetEffectiveDirCacheTimeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEffectiveDirCacheTimeResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ForceExpireDirCache(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ForceExpireDirCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetOpenFileTable(ctx context.Context, in *GetOpenFileTableRequest, opts ...grpc.CallOption) (*OpenFileTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenFileTable)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetOpenFileTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDirCacheTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirCacheTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirCacheTable)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetDirCacheTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetReferencedEntryPaths(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringList)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetReferencedEntryPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetTempFileTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TempFileTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TempFileTable)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetTempFileTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PushTaskChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllTasksCountResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[7], CloudDriveFileSrv_PushTaskChange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, GetAllTasksCountResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_PushTaskChangeClient = grpc.ServerStreamingClient[GetAllTasksCountResult]

func (c *cloudDriveFileSrvClient) PushMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CloudDrivePushMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[8], CloudDriveFileSrv_PushMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, CloudDrivePushMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_PushMessageClient = grpc.ServerStreamingClient[CloudDrivePushMessage]

func (c *cloudDriveFileSrvClient) GetCloudDrive1UserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetCloudDrive1UserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RestartService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RestartService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ShutdownService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ShutdownService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) HasUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_HasUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CheckUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DownloadUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_DownloadUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdateSystem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_UpdateSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) TestUpdate(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_TestUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileMetaData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetaData)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetOriginalPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetOriginalPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CloseFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) WriteToFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteFileRequest, WriteFileResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[9], CloudDriveFileSrv_WriteToFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteFileRequest, WriteFileResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_WriteToFileStreamClient = grpc.ClientStreamingClient[WriteFileRequest, WriteFileResult]

func (c *cloudDriveFileSrvClient) WriteToFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFileResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_WriteToFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetPromotions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPromotionsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPromotionsResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetPromotions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdatePromotionResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_UpdatePromotionResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudDrivePlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloudDrivePlansResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCloudDrivePlansResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetCloudDrivePlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) JoinPlan(ctx context.Context, in *JoinPlanRequest, opts ...grpc.CallOption) (*JoinPlanResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinPlanResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_JoinPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BindCloudAccount(ctx context.Context, in *BindCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BindCloudAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) TransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_TransferBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetBalanceLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceLogResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceLogResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetBalanceLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckActivationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*CheckActivationCodeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckActivationCodeResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CheckActivationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ActivatePlan(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*JoinPlanResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinPlanResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ActivatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckCouponCode(ctx context.Context, in *CheckCouponCodeRequest, opts ...grpc.CallOption) (*CouponCodeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CouponCodeResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CheckCouponCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetReferralCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringValue)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetReferralCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupGetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackupList)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupGetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupGetStatus(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*BackupStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackupStatus)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupGetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupAdd(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRemove(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupUpdate(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupAddDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupAddDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRemoveDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupRemoveDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupSetEnabled(ctx context.Context, in *BackupSetEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupSetEnabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupSetFileSystemWatchEnabled(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupUpdateStrategies(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupUpdateStrategies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRestartWalkingThrough(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_BackupRestartWalkingThrough_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreBackups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_CanAddMoreBackups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetMachineId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetMachineId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetOnlineDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OnlineDevices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnlineDevices)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetOnlineDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) KickoutDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_KickoutDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ListLogFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLogFileResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLogFileResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ListLogFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SyncFileChangesFromCloud(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileSystemChangeStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileSystemChangeStatistics)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_SyncFileChangesFromCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) StartCloudEventListener(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_StartCloudEventListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) StopCloudEventListener(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_StopCloudEventListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) WalkThroughFolderTest(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*WalkThroughFolderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalkThroughFolderResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_WalkThroughFolderTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetWebhookConfigTemplate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResult)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetWebhookConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetWebhookConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WebhookList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookList)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_GetWebhookConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddWebhookConfig(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_AddWebhookConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveWebhookConfig(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_RemoveWebhookConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ChangeWebhookConfig(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudDriveFileSrv_ChangeWebhookConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDriveFileSrvServer is the server API for CloudDriveFileSrv service.
// All implementations must embed UnimplementedCloudDriveFileSrvServer
// for forward compatibility.
type CloudDriveFileSrvServer interface {
	// public methods, no authorization is required
	// returns if clouddrive has logged in to cloudfs server and the user name
	GetSystemInfo(context.Context, *emptypb.Empty) (*CloudDriveSystemInfo, error)
	// get bearer token by username and password
	GetToken(context.Context, *GetTokenRequest) (*JWTToken, error)
	// login to cloudfs server
	Login(context.Context, *UserLoginRequest) (*FileOperationResult, error)
	// register a new count
	Register(context.Context, *UserRegisterRequest) (*FileOperationResult, error)
	// asks cloudfs server to send reset account email with reset link
	SendResetAccountEmail(context.Context, *SendResetAccountEmailRequest) (*emptypb.Empty, error)
	// reset account's data, set new password, with received reset code from email
	ResetAccount(context.Context, *ResetAccountRequest) (*emptypb.Empty, error)
	// authorized methods, Authorization header with Bearer {token} is requirerd
	// asks cloudfs server to send confirm email with confirm link
	SendConfirmEmail(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// confirm email by confirm code
	ConfirmEmail(context.Context, *ConfirmEmailRequest) (*emptypb.Empty, error)
	// get account status
	GetAccountStatus(context.Context, *emptypb.Empty) (*AccountStatusResult, error)
	// get all subfiles by path
	GetSubFiles(*ListSubFileRequest, grpc.ServerStreamingServer[SubFilesReply]) error
	// search under path
	GetSearchResults(*SearchRequest, grpc.ServerStreamingServer[SubFilesReply]) error
	// find file info by full path
	FindFileByPath(context.Context, *FindFileByPathRequest) (*CloudDriveFile, error)
	// create a folder under path
	CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResult, error)
	// create an encrypted folder under path
	CreateEncryptedFolder(context.Context, *CreateEncryptedFolderRequest) (*CreateFolderResult, error)
	// unlock an encrypted folder/file by setting password
	UnlockEncryptedFile(context.Context, *UnlockEncryptedFileRequest) (*FileOperationResult, error)
	// lock an encrypted folder/file by clearing password
	LockEncryptedFile(context.Context, *FileRequest) (*FileOperationResult, error)
	// rename a single file
	RenameFile(context.Context, *RenameFileRequest) (*FileOperationResult, error)
	// batch rename files
	RenameFiles(context.Context, *RenameFilesRequest) (*FileOperationResult, error)
	// move files to a dest folder
	MoveFile(context.Context, *MoveFileRequest) (*FileOperationResult, error)
	// copy files to a dest folder
	CopyFile(context.Context, *CopyFileRequest) (*FileOperationResult, error)
	// delete a single file
	DeleteFile(context.Context, *FileRequest) (*FileOperationResult, error)
	// delete a single file permanently, only aliyundrive supports this currently
	DeleteFilePermanently(context.Context, *FileRequest) (*FileOperationResult, error)
	// batch delete files
	DeleteFiles(context.Context, *MultiFileRequest) (*FileOperationResult, error)
	// batch delete files permanently, only aliyundrive supports this currently
	DeleteFilesPermanently(context.Context, *MultiFileRequest) (*FileOperationResult, error)
	// add offline files by providing magnet, sha1, ..., applies only with folders
	// with canOfflineDownload is true
	AddOfflineFiles(context.Context, *AddOfflineFileRequest) (*FileOperationResult, error)
	// remove offline files by info hash
	RemoveOfflineFiles(context.Context, *RemoveOfflineFilesRequest) (*FileOperationResult, error)
	// list offline files
	ListOfflineFilesByPath(context.Context, *FileRequest) (*OfflineFileListResult, error)
	// list all offline files of a cloud with pagination
	ListAllOfflineFiles(context.Context, *OfflineFileListAllRequest) (*OfflineFileListAllResult, error)
	// add shared link to a folder
	AddSharedLink(context.Context, *AddSharedLinkRequest) (*emptypb.Empty, error)
	// get folder properties, applies only with folders with hasDetailProperties
	// is true
	GetFileDetailProperties(context.Context, *FileRequest) (*FileDetailProperties, error)
	// get total/free/used space of a cloud path
	GetSpaceInfo(context.Context, *FileRequest) (*SpaceInfo, error)
	// get cloud account memberships
	GetCloudMemberships(context.Context, *FileRequest) (*CloudMemberships, error)
	// get server runtime info
	GetRuntimeInfo(context.Context, *emptypb.Empty) (*RuntimeInfo, error)
	// get server stats, including cpu/mem/uptime
	GetRunningInfo(context.Context, *emptypb.Empty) (*RunInfo, error)
	// logout from cloudfs server
	Logout(context.Context, *UserLogoutRequest) (*FileOperationResult, error)
	// check if current user can add more mount point
	CanAddMoreMountPoints(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	// get all mount points
	GetMountPoints(context.Context, *emptypb.Empty) (*GetMountPointsResult, error)
	// add a new mount point
	AddMountPoint(context.Context, *MountOption) (*MountPointResult, error)
	// remove a mountpoint
	RemoveMountPoint(context.Context, *MountPointRequest) (*MountPointResult, error)
	// mount a mount point
	Mount(context.Context, *MountPointRequest) (*MountPointResult, error)
	// unmount a mount point
	Unmount(context.Context, *MountPointRequest) (*MountPointResult, error)
	// change mount point settings
	UpdateMountPoint(context.Context, *UpdateMountPointRequest) (*MountPointResult, error)
	// get all unused drive letters from server's local storage, applies to
	// windows only
	GetAvailableDriveLetters(context.Context, *emptypb.Empty) (*GetAvailableDriveLettersResult, error)
	// check if server has driver letters, returns true only on windows
	HasDriveLetters(context.Context, *emptypb.Empty) (*HasDriveLettersResult, error)
	// check if server can mount both local and cloud drives
	CanMountBothLocalAndCloud(context.Context, *emptypb.Empty) (*BoolResult, error)
	// get subfiles of a local path, used for adding mountpoint from web ui
	LocalGetSubFiles(*LocalGetSubFilesRequest, grpc.ServerStreamingServer[LocalGetSubFilesResult]) error
	// get all transfer tasks' count
	GetAllTasksCount(context.Context, *emptypb.Empty) (*GetAllTasksCountResult, error)
	// get download tasks' count
	GetDownloadFileCount(context.Context, *emptypb.Empty) (*GetDownloadFileCountResult, error)
	// get all download tasks
	GetDownloadFileList(context.Context, *emptypb.Empty) (*GetDownloadFileListResult, error)
	// get all upload tasks' count
	GetUploadFileCount(context.Context, *emptypb.Empty) (*GetUploadFileCountResult, error)
	// get upload tasks, paged by providing page number and items per page and
	// file name filter
	GetUploadFileList(context.Context, *GetUploadFileListRequest) (*GetUploadFileListResult, error)
	// cancel all upload tasks
	CancelAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// cancel selected upload tasks
	CancelUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// pause all upload tasks
	PauseAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// pause selected upload tasks
	PauseUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// resume all upload tasks
	ResumeAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// resume selected upload tasks
	ResumeUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// get all system tasks
	GetCopyTasks(context.Context, *emptypb.Empty) (*GetCopyTaskResult, error)
	// cancel copy folder task
	CancelCopyTask(context.Context, *CopyTaskRequest) (*emptypb.Empty, error)
	// pause copy folder task
	PauseCopyTask(context.Context, *PauseCopyTaskRequest) (*emptypb.Empty, error)
	// remove all completed copy tasks
	// restart copy folder task
	RestartCopyTask(context.Context, *CopyTaskRequest) (*emptypb.Empty, error)
	RemoveCompletedCopyTasks(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// check if current user can add more cloud apis
	CanAddMoreCloudApis(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	// add 115 cloud with editthiscookie
	APILogin115Editthiscookie(context.Context, *Login115EditthiscookieRequest) (*APILoginResult, error)
	// add 115 cloud with qr scanning
	APILogin115QRCode(*Login115QrCodeRequest, grpc.ServerStreamingServer[QRCodeScanMessage]) error
	// add 115 open with qr scanning
	APILogin115OpenQRCode(*emptypb.Empty, grpc.ServerStreamingServer[QRCodeScanMessage]) error
	// add AliyunDriveOpen with OAuth result
	APILoginAliyundriveOAuth(context.Context, *LoginAliyundriveOAuthRequest) (*APILoginResult, error)
	// add AliyunDrive with refresh token
	APILoginAliyundriveRefreshtoken(context.Context, *LoginAliyundriveRefreshtokenRequest) (*APILoginResult, error)
	// add AliyunDrive with qr scanning
	APILoginAliyunDriveQRCode(*LoginAliyundriveQRCodeRequest, grpc.ServerStreamingServer[QRCodeScanMessage]) error
	// add BaiduPan with OAuth result
	APILoginBaiduPanOAuth(context.Context, *LoginBaiduPanOAuthRequest) (*APILoginResult, error)
	// add OneDrive with OAuth result
	APILoginOneDriveOAuth(context.Context, *LoginOneDriveOAuthRequest) (*APILoginResult, error)
	// add Google Drive with OAuth result
	ApiLoginGoogleDriveOAuth(context.Context, *LoginGoogleDriveOAuthRequest) (*APILoginResult, error)
	// add Google Drive with refresh token
	ApiLoginGoogleDriveRefreshToken(context.Context, *LoginGoogleDriveRefreshTokenRequest) (*APILoginResult, error)
	// add Xunlei Drive with OAuth result
	ApiLoginXunleiOAuth(context.Context, *LoginXunleiOAuthRequest) (*APILoginResult, error)
	// add 123 cloud with client id and client secret
	ApiLogin123PanOAuth(context.Context, *Login123PanOAuthRequest) (*APILoginResult, error)
	// add 189 cloud with qr scanning
	APILogin189QRCode(*emptypb.Empty, grpc.ServerStreamingServer[QRCodeScanMessage]) error
	// add PikPak cloud with username and password
	// rpc APILoginPikPak(UserLoginRequest) returns (APILoginResult) {}
	// add webdav
	APILoginWebDav(context.Context, *LoginWebDavRequest) (*APILoginResult, error)
	// add local folder
	APIAddLocalFolder(context.Context, *AddLocalFolderRequest) (*APILoginResult, error)
	// remove a cloud
	RemoveCloudAPI(context.Context, *RemoveCloudAPIRequest) (*FileOperationResult, error)
	// get all cloud apis
	GetAllCloudApis(context.Context, *emptypb.Empty) (*CloudAPIList, error)
	// get CloudAPI configuration
	GetCloudAPIConfig(context.Context, *GetCloudAPIConfigRequest) (*CloudAPIConfig, error)
	// set CloudAPI configuration
	SetCloudAPIConfig(context.Context, *SetCloudAPIConfigRequest) (*emptypb.Empty, error)
	// get all system setings value
	GetSystemSettings(context.Context, *emptypb.Empty) (*SystemSettings, error)
	// set selected system settings value
	SetSystemSettings(context.Context, *SystemSettings) (*emptypb.Empty, error)
	// set dir cache time
	SetDirCacheTimeSecs(context.Context, *SetDirCacheTimeRequest) (*emptypb.Empty, error)
	// get dir cache time in effect (default value will be returned)
	GetEffectiveDirCacheTimeSecs(context.Context, *GetEffectiveDirCacheTimeRequest) (*GetEffectiveDirCacheTimeResult, error)
	// force expire dir cache recursively
	ForceExpireDirCache(context.Context, *FileRequest) (*emptypb.Empty, error)
	// get open file table
	GetOpenFileTable(context.Context, *GetOpenFileTableRequest) (*OpenFileTable, error)
	// get dir cache table
	GetDirCacheTable(context.Context, *emptypb.Empty) (*DirCacheTable, error)
	// get referenced entry paths of parent path
	GetReferencedEntryPaths(context.Context, *FileRequest) (*StringList, error)
	// get temp file table
	GetTempFileTable(context.Context, *emptypb.Empty) (*TempFileTable, error)
	// [deprecated] use PushMessage instead
	// push upload/download task count changes to client, also can be used for
	// client to detect conenction broken
	PushTaskChange(*emptypb.Empty, grpc.ServerStreamingServer[GetAllTasksCountResult]) error
	// general message notification
	PushMessage(*emptypb.Empty, grpc.ServerStreamingServer[CloudDrivePushMessage]) error
	// get CloudDrive1's user data string
	GetCloudDrive1UserData(context.Context, *emptypb.Empty) (*StringResult, error)
	// restart service
	RestartService(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// shutdown service
	ShutdownService(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// check if has updates available
	HasUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error)
	// check software updates
	CheckUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error)
	// download newest version
	DownloadUpdate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// update to newest version
	UpdateSystem(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// test update process
	TestUpdate(context.Context, *FileRequest) (*emptypb.Empty, error)
	// get file metadata
	GetMetaData(context.Context, *FileRequest) (*FileMetaData, error)
	// get file's original path from search result
	GetOriginalPath(context.Context, *FileRequest) (*StringResult, error)
	// change password
	ChangePassword(context.Context, *ChangePasswordRequest) (*FileOperationResult, error)
	// create a new file
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResult, error)
	// close an opened file
	CloseFile(context.Context, *CloseFileRequest) (*FileOperationResult, error)
	// write a stream to an opened file
	WriteToFileStream(grpc.ClientStreamingServer[WriteFileRequest, WriteFileResult]) error
	// write to an opened file
	WriteToFile(context.Context, *WriteFileRequest) (*WriteFileResult, error)
	// get promotions
	GetPromotions(context.Context, *emptypb.Empty) (*GetPromotionsResult, error)
	// update promotion result after purchased
	UpdatePromotionResult(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// get cloudfs plans
	GetCloudDrivePlans(context.Context, *emptypb.Empty) (*GetCloudDrivePlansResult, error)
	// join a plan
	JoinPlan(context.Context, *JoinPlanRequest) (*JoinPlanResult, error)
	// bind account to a cloud account id
	BindCloudAccount(context.Context, *BindCloudAccountRequest) (*emptypb.Empty, error)
	// transfer balance to another user
	TransferBalance(context.Context, *TransferBalanceRequest) (*emptypb.Empty, error)
	// change email
	ChangeEmail(context.Context, *ChangeEmailRequest) (*emptypb.Empty, error)
	// chech balance log
	GetBalanceLog(context.Context, *emptypb.Empty) (*BalanceLogResult, error)
	// check activation code for a plan
	CheckActivationCode(context.Context, *StringValue) (*CheckActivationCodeResult, error)
	// Activate plan using an activation code
	ActivatePlan(context.Context, *StringValue) (*JoinPlanResult, error)
	// check counpon code for a plan
	CheckCouponCode(context.Context, *CheckCouponCodeRequest) (*CouponCodeResult, error)
	// get referral code of current user
	GetReferralCode(context.Context, *emptypb.Empty) (*StringValue, error)
	// list all backups
	BackupGetAll(context.Context, *emptypb.Empty) (*BackupList, error)
	// get backup status
	BackupGetStatus(context.Context, *StringValue) (*BackupStatus, error)
	// add a backup
	BackupAdd(context.Context, *Backup) (*emptypb.Empty, error)
	// remove a backup by it's source path
	BackupRemove(context.Context, *StringValue) (*emptypb.Empty, error)
	// update a backup
	BackupUpdate(context.Context, *Backup) (*emptypb.Empty, error)
	// add destinations to a backup
	BackupAddDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// remove destinations from a backup
	BackupRemoveDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// enable/disable a backup
	BackupSetEnabled(context.Context, *BackupSetEnabledRequest) (*emptypb.Empty, error)
	// enable/disable a backup's FileSystemWatch
	BackupSetFileSystemWatchEnabled(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// deprecated, use BackupUpdate instead
	BackupUpdateStrategies(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// restart a backup walking through
	BackupRestartWalkingThrough(context.Context, *StringValue) (*emptypb.Empty, error)
	// check if current plan can support more backups
	CanAddMoreBackups(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	// get machine id
	GetMachineId(context.Context, *emptypb.Empty) (*StringResult, error)
	// get online devices
	GetOnlineDevices(context.Context, *emptypb.Empty) (*OnlineDevices, error)
	// kickout a device
	KickoutDevice(context.Context, *DeviceRequest) (*emptypb.Empty, error)
	// list log file names
	ListLogFiles(context.Context, *emptypb.Empty) (*ListLogFileResult, error)
	// sync file changes from cloud
	SyncFileChangesFromCloud(context.Context, *FileRequest) (*FileSystemChangeStatistics, error)
	// start cloud events listener
	StartCloudEventListener(context.Context, *FileRequest) (*emptypb.Empty, error)
	// stop cloud events listener
	StopCloudEventListener(context.Context, *FileRequest) (*emptypb.Empty, error)
	// walk through folder test
	WalkThroughFolderTest(context.Context, *FileRequest) (*WalkThroughFolderResult, error)
	// get a webhook config template
	GetWebhookConfigTemplate(context.Context, *emptypb.Empty) (*StringResult, error)
	// list all webhook configs
	GetWebhookConfigs(context.Context, *emptypb.Empty) (*WebhookList, error)
	// add webhook config
	AddWebhookConfig(context.Context, *WebhookRequest) (*emptypb.Empty, error)
	// remove webhook config
	RemoveWebhookConfig(context.Context, *StringValue) (*emptypb.Empty, error)
	// change webhook content
	ChangeWebhookConfig(context.Context, *WebhookRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudDriveFileSrvServer()
}

// UnimplementedCloudDriveFileSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudDriveFileSrvServer struct{}

func (UnimplementedCloudDriveFileSrvServer) GetSystemInfo(context.Context, *emptypb.Empty) (*CloudDriveSystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetToken(context.Context, *GetTokenRequest) (*JWTToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Login(context.Context, *UserLoginRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Register(context.Context, *UserRegisterRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SendResetAccountEmail(context.Context, *SendResetAccountEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetAccountEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResetAccount(context.Context, *ResetAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAccount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SendConfirmEmail(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ConfirmEmail(context.Context, *ConfirmEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAccountStatus(context.Context, *emptypb.Empty) (*AccountStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStatus not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSubFiles(*ListSubFileRequest, grpc.ServerStreamingServer[SubFilesReply]) error {
	return status.Errorf(codes.Unimplemented, "method GetSubFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSearchResults(*SearchRequest, grpc.ServerStreamingServer[SubFilesReply]) error {
	return status.Errorf(codes.Unimplemented, "method GetSearchResults not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) FindFileByPath(context.Context, *FindFileByPathRequest) (*CloudDriveFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileByPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CreateEncryptedFolder(context.Context, *CreateEncryptedFolderRequest) (*CreateFolderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncryptedFolder not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UnlockEncryptedFile(context.Context, *UnlockEncryptedFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockEncryptedFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) LockEncryptedFile(context.Context, *FileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockEncryptedFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RenameFile(context.Context, *RenameFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RenameFiles(context.Context, *RenameFilesRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) MoveFile(context.Context, *MoveFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CopyFile(context.Context, *CopyFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFile(context.Context, *FileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFilePermanently(context.Context, *FileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilePermanently not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFiles(context.Context, *MultiFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFilesPermanently(context.Context, *MultiFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilesPermanently not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddOfflineFiles(context.Context, *AddOfflineFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveOfflineFiles(context.Context, *RemoveOfflineFilesRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ListOfflineFilesByPath(context.Context, *FileRequest) (*OfflineFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfflineFilesByPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ListAllOfflineFiles(context.Context, *OfflineFileListAllRequest) (*OfflineFileListAllResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddSharedLink(context.Context, *AddSharedLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSharedLink not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetFileDetailProperties(context.Context, *FileRequest) (*FileDetailProperties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetailProperties not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSpaceInfo(context.Context, *FileRequest) (*SpaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudMemberships(context.Context, *FileRequest) (*CloudMemberships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudMemberships not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetRuntimeInfo(context.Context, *emptypb.Empty) (*RuntimeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetRunningInfo(context.Context, *emptypb.Empty) (*RunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Logout(context.Context, *UserLogoutRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreMountPoints(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreMountPoints not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetMountPoints(context.Context, *emptypb.Empty) (*GetMountPointsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMountPoints not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddMountPoint(context.Context, *MountOption) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveMountPoint(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Mount(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Unmount(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdateMountPoint(context.Context, *UpdateMountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAvailableDriveLetters(context.Context, *emptypb.Empty) (*GetAvailableDriveLettersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDriveLetters not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) HasDriveLetters(context.Context, *emptypb.Empty) (*HasDriveLettersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasDriveLetters not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanMountBothLocalAndCloud(context.Context, *emptypb.Empty) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanMountBothLocalAndCloud not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) LocalGetSubFiles(*LocalGetSubFilesRequest, grpc.ServerStreamingServer[LocalGetSubFilesResult]) error {
	return status.Errorf(codes.Unimplemented, "method LocalGetSubFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAllTasksCount(context.Context, *emptypb.Empty) (*GetAllTasksCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTasksCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDownloadFileCount(context.Context, *emptypb.Empty) (*GetDownloadFileCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadFileCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDownloadFileList(context.Context, *emptypb.Empty) (*GetDownloadFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadFileList not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetUploadFileCount(context.Context, *emptypb.Empty) (*GetUploadFileCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetUploadFileList(context.Context, *GetUploadFileListRequest) (*GetUploadFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileList not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CancelAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CancelUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PauseAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PauseUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResumeAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResumeUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCopyTasks(context.Context, *emptypb.Empty) (*GetCopyTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopyTasks not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CancelCopyTask(context.Context, *CopyTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCopyTask not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PauseCopyTask(context.Context, *PauseCopyTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCopyTask not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RestartCopyTask(context.Context, *CopyTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartCopyTask not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveCompletedCopyTasks(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCompletedCopyTasks not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreCloudApis(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreCloudApis not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin115Editthiscookie(context.Context, *Login115EditthiscookieRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILogin115Editthiscookie not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin115QRCode(*Login115QrCodeRequest, grpc.ServerStreamingServer[QRCodeScanMessage]) error {
	return status.Errorf(codes.Unimplemented, "method APILogin115QRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin115OpenQRCode(*emptypb.Empty, grpc.ServerStreamingServer[QRCodeScanMessage]) error {
	return status.Errorf(codes.Unimplemented, "method APILogin115OpenQRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyundriveOAuth(context.Context, *LoginAliyundriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginAliyundriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyundriveRefreshtoken(context.Context, *LoginAliyundriveRefreshtokenRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginAliyundriveRefreshtoken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyunDriveQRCode(*LoginAliyundriveQRCodeRequest, grpc.ServerStreamingServer[QRCodeScanMessage]) error {
	return status.Errorf(codes.Unimplemented, "method APILoginAliyunDriveQRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginBaiduPanOAuth(context.Context, *LoginBaiduPanOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginBaiduPanOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginOneDriveOAuth(context.Context, *LoginOneDriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginOneDriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginGoogleDriveOAuth(context.Context, *LoginGoogleDriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginGoogleDriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginGoogleDriveRefreshToken(context.Context, *LoginGoogleDriveRefreshTokenRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginGoogleDriveRefreshToken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginXunleiOAuth(context.Context, *LoginXunleiOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginXunleiOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLogin123PanOAuth(context.Context, *Login123PanOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLogin123PanOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin189QRCode(*emptypb.Empty, grpc.ServerStreamingServer[QRCodeScanMessage]) error {
	return status.Errorf(codes.Unimplemented, "method APILogin189QRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginWebDav(context.Context, *LoginWebDavRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginWebDav not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APIAddLocalFolder(context.Context, *AddLocalFolderRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIAddLocalFolder not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveCloudAPI(context.Context, *RemoveCloudAPIRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudAPI not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAllCloudApis(context.Context, *emptypb.Empty) (*CloudAPIList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCloudApis not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudAPIConfig(context.Context, *GetCloudAPIConfigRequest) (*CloudAPIConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAPIConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetCloudAPIConfig(context.Context, *SetCloudAPIConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCloudAPIConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSystemSettings(context.Context, *emptypb.Empty) (*SystemSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSettings not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetSystemSettings(context.Context, *SystemSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemSettings not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetDirCacheTimeSecs(context.Context, *SetDirCacheTimeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDirCacheTimeSecs not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetEffectiveDirCacheTimeSecs(context.Context, *GetEffectiveDirCacheTimeRequest) (*GetEffectiveDirCacheTimeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveDirCacheTimeSecs not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ForceExpireDirCache(context.Context, *FileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceExpireDirCache not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetOpenFileTable(context.Context, *GetOpenFileTableRequest) (*OpenFileTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenFileTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDirCacheTable(context.Context, *emptypb.Empty) (*DirCacheTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirCacheTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetReferencedEntryPaths(context.Context, *FileRequest) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferencedEntryPaths not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetTempFileTable(context.Context, *emptypb.Empty) (*TempFileTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempFileTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PushTaskChange(*emptypb.Empty, grpc.ServerStreamingServer[GetAllTasksCountResult]) error {
	return status.Errorf(codes.Unimplemented, "method PushTaskChange not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PushMessage(*emptypb.Empty, grpc.ServerStreamingServer[CloudDrivePushMessage]) error {
	return status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudDrive1UserData(context.Context, *emptypb.Empty) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDrive1UserData not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RestartService(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ShutdownService(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownService not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) HasUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DownloadUpdate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdateSystem(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) TestUpdate(context.Context, *FileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetMetaData(context.Context, *FileRequest) (*FileMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaData not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetOriginalPath(context.Context, *FileRequest) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ChangePassword(context.Context, *ChangePasswordRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CloseFile(context.Context, *CloseFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) WriteToFileStream(grpc.ClientStreamingServer[WriteFileRequest, WriteFileResult]) error {
	return status.Errorf(codes.Unimplemented, "method WriteToFileStream not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) WriteToFile(context.Context, *WriteFileRequest) (*WriteFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetPromotions(context.Context, *emptypb.Empty) (*GetPromotionsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotions not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdatePromotionResult(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotionResult not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudDrivePlans(context.Context, *emptypb.Empty) (*GetCloudDrivePlansResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDrivePlans not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) JoinPlan(context.Context, *JoinPlanRequest) (*JoinPlanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPlan not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BindCloudAccount(context.Context, *BindCloudAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindCloudAccount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) TransferBalance(context.Context, *TransferBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBalance not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetBalanceLog(context.Context, *emptypb.Empty) (*BalanceLogResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLog not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckActivationCode(context.Context, *StringValue) (*CheckActivationCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActivationCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ActivatePlan(context.Context, *StringValue) (*JoinPlanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePlan not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckCouponCode(context.Context, *CheckCouponCodeRequest) (*CouponCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCouponCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetReferralCode(context.Context, *emptypb.Empty) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupGetAll(context.Context, *emptypb.Empty) (*BackupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupGetAll not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupGetStatus(context.Context, *StringValue) (*BackupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupGetStatus not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupAdd(context.Context, *Backup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupAdd not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRemove(context.Context, *StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRemove not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupUpdate(context.Context, *Backup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupAddDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupAddDestination not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRemoveDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRemoveDestination not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupSetEnabled(context.Context, *BackupSetEnabledRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupSetEnabled not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupSetFileSystemWatchEnabled(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupSetFileSystemWatchEnabled not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupUpdateStrategies(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupUpdateStrategies not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRestartWalkingThrough(context.Context, *StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRestartWalkingThrough not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreBackups(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreBackups not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetMachineId(context.Context, *emptypb.Empty) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineId not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetOnlineDevices(context.Context, *emptypb.Empty) (*OnlineDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineDevices not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) KickoutDevice(context.Context, *DeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickoutDevice not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ListLogFiles(context.Context, *emptypb.Empty) (*ListLogFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SyncFileChangesFromCloud(context.Context, *FileRequest) (*FileSystemChangeStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFileChangesFromCloud not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) StartCloudEventListener(context.Context, *FileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCloudEventListener not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) StopCloudEventListener(context.Context, *FileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCloudEventListener not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) WalkThroughFolderTest(context.Context, *FileRequest) (*WalkThroughFolderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalkThroughFolderTest not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetWebhookConfigTemplate(context.Context, *emptypb.Empty) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookConfigTemplate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetWebhookConfigs(context.Context, *emptypb.Empty) (*WebhookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookConfigs not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddWebhookConfig(context.Context, *WebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWebhookConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveWebhookConfig(context.Context, *StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWebhookConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ChangeWebhookConfig(context.Context, *WebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWebhookConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) mustEmbedUnimplementedCloudDriveFileSrvServer() {}
func (UnimplementedCloudDriveFileSrvServer) testEmbeddedByValue()                           {}

// UnsafeCloudDriveFileSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudDriveFileSrvServer will
// result in compilation errors.
type UnsafeCloudDriveFileSrvServer interface {
	mustEmbedUnimplementedCloudDriveFileSrvServer()
}

func RegisterCloudDriveFileSrvServer(s grpc.ServiceRegistrar, srv CloudDriveFileSrvServer) {
	// If the following call pancis, it indicates UnimplementedCloudDriveFileSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudDriveFileSrv_ServiceDesc, srv)
}

func _CloudDriveFileSrv_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSystemInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SendResetAccountEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetAccountEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SendResetAccountEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SendResetAccountEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SendResetAccountEmail(ctx, req.(*SendResetAccountEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ResetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResetAccount(ctx, req.(*ResetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SendConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SendConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SendConfirmEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SendConfirmEmail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ConfirmEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ConfirmEmail(ctx, req.(*ConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetAccountStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAccountStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSubFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSubFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).GetSubFiles(m, &grpc.GenericServerStream[ListSubFileRequest, SubFilesReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_GetSubFilesServer = grpc.ServerStreamingServer[SubFilesReply]

func _CloudDriveFileSrv_GetSearchResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).GetSearchResults(m, &grpc.GenericServerStream[SearchRequest, SubFilesReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_GetSearchResultsServer = grpc.ServerStreamingServer[SubFilesReply]

func _CloudDriveFileSrv_FindFileByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).FindFileByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_FindFileByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).FindFileByPath(ctx, req.(*FindFileByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CreateEncryptedFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncryptedFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CreateEncryptedFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CreateEncryptedFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CreateEncryptedFolder(ctx, req.(*CreateEncryptedFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UnlockEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockEncryptedFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UnlockEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_UnlockEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UnlockEncryptedFile(ctx, req.(*UnlockEncryptedFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_LockEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).LockEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_LockEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).LockEncryptedFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RenameFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RenameFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RenameFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RenameFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RenameFiles(ctx, req.(*RenameFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFilePermanently_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFilePermanently(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_DeleteFilePermanently_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFilePermanently(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_DeleteFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFiles(ctx, req.(*MultiFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFilesPermanently_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFilesPermanently(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_DeleteFilesPermanently_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFilesPermanently(ctx, req.(*MultiFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOfflineFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_AddOfflineFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddOfflineFiles(ctx, req.(*AddOfflineFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOfflineFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RemoveOfflineFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveOfflineFiles(ctx, req.(*RemoveOfflineFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ListOfflineFilesByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ListOfflineFilesByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ListOfflineFilesByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ListOfflineFilesByPath(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ListAllOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineFileListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ListAllOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ListAllOfflineFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ListAllOfflineFiles(ctx, req.(*OfflineFileListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddSharedLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharedLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddSharedLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_AddSharedLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddSharedLink(ctx, req.(*AddSharedLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetFileDetailProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetFileDetailProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetFileDetailProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetFileDetailProperties(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetSpaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSpaceInfo(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetCloudMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudMemberships(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetRuntimeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetRuntimeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetRuntimeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetRuntimeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetRunningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetRunningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetRunningInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetRunningInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Logout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreMountPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreMountPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CanAddMoreMountPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreMountPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetMountPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetMountPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetMountPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetMountPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_AddMountPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddMountPoint(ctx, req.(*MountOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RemoveMountPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveMountPoint(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Mount(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_Unmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Unmount(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdateMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdateMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_UpdateMountPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdateMountPoint(ctx, req.(*UpdateMountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAvailableDriveLetters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAvailableDriveLetters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetAvailableDriveLetters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAvailableDriveLetters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_HasDriveLetters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).HasDriveLetters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_HasDriveLetters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).HasDriveLetters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanMountBothLocalAndCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanMountBothLocalAndCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CanMountBothLocalAndCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanMountBothLocalAndCloud(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_LocalGetSubFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocalGetSubFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).LocalGetSubFiles(m, &grpc.GenericServerStream[LocalGetSubFilesRequest, LocalGetSubFilesResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_LocalGetSubFilesServer = grpc.ServerStreamingServer[LocalGetSubFilesResult]

func _CloudDriveFileSrv_GetAllTasksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAllTasksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetAllTasksCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAllTasksCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDownloadFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetDownloadFileCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDownloadFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetDownloadFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetUploadFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetUploadFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetUploadFileCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetUploadFileCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetUploadFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetUploadFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetUploadFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetUploadFileList(ctx, req.(*GetUploadFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CancelAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CancelAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CancelAllUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CancelAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CancelUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CancelUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CancelUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CancelUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PauseAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).PauseAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_PauseAllUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).PauseAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PauseUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).PauseUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_PauseUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).PauseUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResumeAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResumeAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ResumeAllUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResumeAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResumeUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResumeUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ResumeUploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResumeUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCopyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCopyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetCopyTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCopyTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CancelCopyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CancelCopyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CancelCopyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CancelCopyTask(ctx, req.(*CopyTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PauseCopyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCopyTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).PauseCopyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_PauseCopyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).PauseCopyTask(ctx, req.(*PauseCopyTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RestartCopyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RestartCopyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RestartCopyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RestartCopyTask(ctx, req.(*CopyTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveCompletedCopyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveCompletedCopyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RemoveCompletedCopyTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveCompletedCopyTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreCloudApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreCloudApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CanAddMoreCloudApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreCloudApis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin115Editthiscookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login115EditthiscookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILogin115Editthiscookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILogin115Editthiscookie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILogin115Editthiscookie(ctx, req.(*Login115EditthiscookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin115QRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Login115QrCodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILogin115QRCode(m, &grpc.GenericServerStream[Login115QrCodeRequest, QRCodeScanMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin115QRCodeServer = grpc.ServerStreamingServer[QRCodeScanMessage]

func _CloudDriveFileSrv_APILogin115OpenQRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILogin115OpenQRCode(m, &grpc.GenericServerStream[emptypb.Empty, QRCodeScanMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin115OpenQRCodeServer = grpc.ServerStreamingServer[QRCodeScanMessage]

func _CloudDriveFileSrv_APILoginAliyundriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAliyundriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILoginAliyundriveOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveOAuth(ctx, req.(*LoginAliyundriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAliyundriveRefreshtokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveRefreshtoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveRefreshtoken(ctx, req.(*LoginAliyundriveRefreshtokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginAliyunDriveQRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginAliyundriveQRCodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILoginAliyunDriveQRCode(m, &grpc.GenericServerStream[LoginAliyundriveQRCodeRequest, QRCodeScanMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILoginAliyunDriveQRCodeServer = grpc.ServerStreamingServer[QRCodeScanMessage]

func _CloudDriveFileSrv_APILoginBaiduPanOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBaiduPanOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginBaiduPanOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILoginBaiduPanOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginBaiduPanOAuth(ctx, req.(*LoginBaiduPanOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginOneDriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOneDriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginOneDriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILoginOneDriveOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginOneDriveOAuth(ctx, req.(*LoginOneDriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleDriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveOAuth(ctx, req.(*LoginGoogleDriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleDriveRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveRefreshToken(ctx, req.(*LoginGoogleDriveRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginXunleiOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginXunleiOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginXunleiOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ApiLoginXunleiOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginXunleiOAuth(ctx, req.(*LoginXunleiOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLogin123PanOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login123PanOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLogin123PanOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ApiLogin123PanOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLogin123PanOAuth(ctx, req.(*Login123PanOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin189QRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILogin189QRCode(m, &grpc.GenericServerStream[emptypb.Empty, QRCodeScanMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_APILogin189QRCodeServer = grpc.ServerStreamingServer[QRCodeScanMessage]

func _CloudDriveFileSrv_APILoginWebDav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWebDavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginWebDav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APILoginWebDav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginWebDav(ctx, req.(*LoginWebDavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APIAddLocalFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLocalFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APIAddLocalFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_APIAddLocalFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APIAddLocalFolder(ctx, req.(*AddLocalFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveCloudAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCloudAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveCloudAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RemoveCloudAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveCloudAPI(ctx, req.(*RemoveCloudAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAllCloudApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAllCloudApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetAllCloudApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAllCloudApis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudAPIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudAPIConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudAPIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetCloudAPIConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudAPIConfig(ctx, req.(*GetCloudAPIConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetCloudAPIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCloudAPIConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetCloudAPIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SetCloudAPIConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetCloudAPIConfig(ctx, req.(*SetCloudAPIConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetSystemSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSystemSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SetSystemSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetSystemSettings(ctx, req.(*SystemSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetDirCacheTimeSecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDirCacheTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetDirCacheTimeSecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SetDirCacheTimeSecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetDirCacheTimeSecs(ctx, req.(*SetDirCacheTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveDirCacheTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetEffectiveDirCacheTimeSecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetEffectiveDirCacheTimeSecs(ctx, req.(*GetEffectiveDirCacheTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ForceExpireDirCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ForceExpireDirCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ForceExpireDirCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ForceExpireDirCache(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetOpenFileTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenFileTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetOpenFileTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetOpenFileTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetOpenFileTable(ctx, req.(*GetOpenFileTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDirCacheTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDirCacheTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetDirCacheTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDirCacheTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetReferencedEntryPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetReferencedEntryPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetReferencedEntryPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetReferencedEntryPaths(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetTempFileTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetTempFileTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetTempFileTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetTempFileTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PushTaskChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).PushTaskChange(m, &grpc.GenericServerStream[emptypb.Empty, GetAllTasksCountResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_PushTaskChangeServer = grpc.ServerStreamingServer[GetAllTasksCountResult]

func _CloudDriveFileSrv_PushMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).PushMessage(m, &grpc.GenericServerStream[emptypb.Empty, CloudDrivePushMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_PushMessageServer = grpc.ServerStreamingServer[CloudDrivePushMessage]

func _CloudDriveFileSrv_GetCloudDrive1UserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudDrive1UserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetCloudDrive1UserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudDrive1UserData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RestartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RestartService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ShutdownService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ShutdownService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ShutdownService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ShutdownService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_HasUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).HasUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_HasUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).HasUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CheckUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DownloadUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DownloadUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_DownloadUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DownloadUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_UpdateSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdateSystem(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_TestUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).TestUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_TestUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).TestUpdate(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetMetaData(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetOriginalPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetOriginalPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetOriginalPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetOriginalPath(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CloseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CloseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CloseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CloseFile(ctx, req.(*CloseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_WriteToFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudDriveFileSrvServer).WriteToFileStream(&grpc.GenericServerStream[WriteFileRequest, WriteFileResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudDriveFileSrv_WriteToFileStreamServer = grpc.ClientStreamingServer[WriteFileRequest, WriteFileResult]

func _CloudDriveFileSrv_WriteToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).WriteToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_WriteToFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).WriteToFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetPromotions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetPromotions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdatePromotionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdatePromotionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_UpdatePromotionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdatePromotionResult(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudDrivePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudDrivePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetCloudDrivePlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudDrivePlans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_JoinPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).JoinPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_JoinPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).JoinPlan(ctx, req.(*JoinPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BindCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BindCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BindCloudAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BindCloudAccount(ctx, req.(*BindCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_TransferBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).TransferBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_TransferBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).TransferBalance(ctx, req.(*TransferBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetBalanceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetBalanceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetBalanceLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetBalanceLog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CheckActivationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckActivationCode(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ActivatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ActivatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ActivatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ActivatePlan(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckCouponCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCouponCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckCouponCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CheckCouponCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckCouponCode(ctx, req.(*CheckCouponCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetReferralCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetReferralCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetReferralCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetReferralCode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupGetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupGetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupGetStatus(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupAdd(ctx, req.(*Backup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRemove(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupUpdate(ctx, req.(*Backup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupAddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupAddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupAddDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupAddDestination(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRemoveDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRemoveDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupRemoveDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRemoveDestination(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupSetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupSetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupSetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupSetEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupSetEnabled(ctx, req.(*BackupSetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupSetFileSystemWatchEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupSetFileSystemWatchEnabled(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupUpdateStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupUpdateStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupUpdateStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupUpdateStrategies(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRestartWalkingThrough_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRestartWalkingThrough(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_BackupRestartWalkingThrough_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRestartWalkingThrough(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_CanAddMoreBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreBackups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetMachineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetMachineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetMachineId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetMachineId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetOnlineDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetOnlineDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetOnlineDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetOnlineDevices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_KickoutDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).KickoutDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_KickoutDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).KickoutDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ListLogFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ListLogFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ListLogFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ListLogFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SyncFileChangesFromCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SyncFileChangesFromCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_SyncFileChangesFromCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SyncFileChangesFromCloud(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_StartCloudEventListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).StartCloudEventListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_StartCloudEventListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).StartCloudEventListener(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_StopCloudEventListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).StopCloudEventListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_StopCloudEventListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).StopCloudEventListener(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_WalkThroughFolderTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).WalkThroughFolderTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_WalkThroughFolderTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).WalkThroughFolderTest(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetWebhookConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetWebhookConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetWebhookConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetWebhookConfigTemplate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetWebhookConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetWebhookConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_GetWebhookConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetWebhookConfigs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddWebhookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddWebhookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_AddWebhookConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddWebhookConfig(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveWebhookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveWebhookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_RemoveWebhookConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveWebhookConfig(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ChangeWebhookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ChangeWebhookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriveFileSrv_ChangeWebhookConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ChangeWebhookConfig(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudDriveFileSrv_ServiceDesc is the grpc.ServiceDesc for CloudDriveFileSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudDriveFileSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouddrive.CloudDriveFileSrv",
	HandlerType: (*CloudDriveFileSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _CloudDriveFileSrv_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _CloudDriveFileSrv_GetToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CloudDriveFileSrv_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CloudDriveFileSrv_Register_Handler,
		},
		{
			MethodName: "SendResetAccountEmail",
			Handler:    _CloudDriveFileSrv_SendResetAccountEmail_Handler,
		},
		{
			MethodName: "ResetAccount",
			Handler:    _CloudDriveFileSrv_ResetAccount_Handler,
		},
		{
			MethodName: "SendConfirmEmail",
			Handler:    _CloudDriveFileSrv_SendConfirmEmail_Handler,
		},
		{
			MethodName: "ConfirmEmail",
			Handler:    _CloudDriveFileSrv_ConfirmEmail_Handler,
		},
		{
			MethodName: "GetAccountStatus",
			Handler:    _CloudDriveFileSrv_GetAccountStatus_Handler,
		},
		{
			MethodName: "FindFileByPath",
			Handler:    _CloudDriveFileSrv_FindFileByPath_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _CloudDriveFileSrv_CreateFolder_Handler,
		},
		{
			MethodName: "CreateEncryptedFolder",
			Handler:    _CloudDriveFileSrv_CreateEncryptedFolder_Handler,
		},
		{
			MethodName: "UnlockEncryptedFile",
			Handler:    _CloudDriveFileSrv_UnlockEncryptedFile_Handler,
		},
		{
			MethodName: "LockEncryptedFile",
			Handler:    _CloudDriveFileSrv_LockEncryptedFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _CloudDriveFileSrv_RenameFile_Handler,
		},
		{
			MethodName: "RenameFiles",
			Handler:    _CloudDriveFileSrv_RenameFiles_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _CloudDriveFileSrv_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _CloudDriveFileSrv_CopyFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _CloudDriveFileSrv_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteFilePermanently",
			Handler:    _CloudDriveFileSrv_DeleteFilePermanently_Handler,
		},
		{
			MethodName: "DeleteFiles",
			Handler:    _CloudDriveFileSrv_DeleteFiles_Handler,
		},
		{
			MethodName: "DeleteFilesPermanently",
			Handler:    _CloudDriveFileSrv_DeleteFilesPermanently_Handler,
		},
		{
			MethodName: "AddOfflineFiles",
			Handler:    _CloudDriveFileSrv_AddOfflineFiles_Handler,
		},
		{
			MethodName: "RemoveOfflineFiles",
			Handler:    _CloudDriveFileSrv_RemoveOfflineFiles_Handler,
		},
		{
			MethodName: "ListOfflineFilesByPath",
			Handler:    _CloudDriveFileSrv_ListOfflineFilesByPath_Handler,
		},
		{
			MethodName: "ListAllOfflineFiles",
			Handler:    _CloudDriveFileSrv_ListAllOfflineFiles_Handler,
		},
		{
			MethodName: "AddSharedLink",
			Handler:    _CloudDriveFileSrv_AddSharedLink_Handler,
		},
		{
			MethodName: "GetFileDetailProperties",
			Handler:    _CloudDriveFileSrv_GetFileDetailProperties_Handler,
		},
		{
			MethodName: "GetSpaceInfo",
			Handler:    _CloudDriveFileSrv_GetSpaceInfo_Handler,
		},
		{
			MethodName: "GetCloudMemberships",
			Handler:    _CloudDriveFileSrv_GetCloudMemberships_Handler,
		},
		{
			MethodName: "GetRuntimeInfo",
			Handler:    _CloudDriveFileSrv_GetRuntimeInfo_Handler,
		},
		{
			MethodName: "GetRunningInfo",
			Handler:    _CloudDriveFileSrv_GetRunningInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _CloudDriveFileSrv_Logout_Handler,
		},
		{
			MethodName: "CanAddMoreMountPoints",
			Handler:    _CloudDriveFileSrv_CanAddMoreMountPoints_Handler,
		},
		{
			MethodName: "GetMountPoints",
			Handler:    _CloudDriveFileSrv_GetMountPoints_Handler,
		},
		{
			MethodName: "AddMountPoint",
			Handler:    _CloudDriveFileSrv_AddMountPoint_Handler,
		},
		{
			MethodName: "RemoveMountPoint",
			Handler:    _CloudDriveFileSrv_RemoveMountPoint_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _CloudDriveFileSrv_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _CloudDriveFileSrv_Unmount_Handler,
		},
		{
			MethodName: "UpdateMountPoint",
			Handler:    _CloudDriveFileSrv_UpdateMountPoint_Handler,
		},
		{
			MethodName: "GetAvailableDriveLetters",
			Handler:    _CloudDriveFileSrv_GetAvailableDriveLetters_Handler,
		},
		{
			MethodName: "HasDriveLetters",
			Handler:    _CloudDriveFileSrv_HasDriveLetters_Handler,
		},
		{
			MethodName: "CanMountBothLocalAndCloud",
			Handler:    _CloudDriveFileSrv_CanMountBothLocalAndCloud_Handler,
		},
		{
			MethodName: "GetAllTasksCount",
			Handler:    _CloudDriveFileSrv_GetAllTasksCount_Handler,
		},
		{
			MethodName: "GetDownloadFileCount",
			Handler:    _CloudDriveFileSrv_GetDownloadFileCount_Handler,
		},
		{
			MethodName: "GetDownloadFileList",
			Handler:    _CloudDriveFileSrv_GetDownloadFileList_Handler,
		},
		{
			MethodName: "GetUploadFileCount",
			Handler:    _CloudDriveFileSrv_GetUploadFileCount_Handler,
		},
		{
			MethodName: "GetUploadFileList",
			Handler:    _CloudDriveFileSrv_GetUploadFileList_Handler,
		},
		{
			MethodName: "CancelAllUploadFiles",
			Handler:    _CloudDriveFileSrv_CancelAllUploadFiles_Handler,
		},
		{
			MethodName: "CancelUploadFiles",
			Handler:    _CloudDriveFileSrv_CancelUploadFiles_Handler,
		},
		{
			MethodName: "PauseAllUploadFiles",
			Handler:    _CloudDriveFileSrv_PauseAllUploadFiles_Handler,
		},
		{
			MethodName: "PauseUploadFiles",
			Handler:    _CloudDriveFileSrv_PauseUploadFiles_Handler,
		},
		{
			MethodName: "ResumeAllUploadFiles",
			Handler:    _CloudDriveFileSrv_ResumeAllUploadFiles_Handler,
		},
		{
			MethodName: "ResumeUploadFiles",
			Handler:    _CloudDriveFileSrv_ResumeUploadFiles_Handler,
		},
		{
			MethodName: "GetCopyTasks",
			Handler:    _CloudDriveFileSrv_GetCopyTasks_Handler,
		},
		{
			MethodName: "CancelCopyTask",
			Handler:    _CloudDriveFileSrv_CancelCopyTask_Handler,
		},
		{
			MethodName: "PauseCopyTask",
			Handler:    _CloudDriveFileSrv_PauseCopyTask_Handler,
		},
		{
			MethodName: "RestartCopyTask",
			Handler:    _CloudDriveFileSrv_RestartCopyTask_Handler,
		},
		{
			MethodName: "RemoveCompletedCopyTasks",
			Handler:    _CloudDriveFileSrv_RemoveCompletedCopyTasks_Handler,
		},
		{
			MethodName: "CanAddMoreCloudApis",
			Handler:    _CloudDriveFileSrv_CanAddMoreCloudApis_Handler,
		},
		{
			MethodName: "APILogin115Editthiscookie",
			Handler:    _CloudDriveFileSrv_APILogin115Editthiscookie_Handler,
		},
		{
			MethodName: "APILoginAliyundriveOAuth",
			Handler:    _CloudDriveFileSrv_APILoginAliyundriveOAuth_Handler,
		},
		{
			MethodName: "APILoginAliyundriveRefreshtoken",
			Handler:    _CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_Handler,
		},
		{
			MethodName: "APILoginBaiduPanOAuth",
			Handler:    _CloudDriveFileSrv_APILoginBaiduPanOAuth_Handler,
		},
		{
			MethodName: "APILoginOneDriveOAuth",
			Handler:    _CloudDriveFileSrv_APILoginOneDriveOAuth_Handler,
		},
		{
			MethodName: "ApiLoginGoogleDriveOAuth",
			Handler:    _CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_Handler,
		},
		{
			MethodName: "ApiLoginGoogleDriveRefreshToken",
			Handler:    _CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_Handler,
		},
		{
			MethodName: "ApiLoginXunleiOAuth",
			Handler:    _CloudDriveFileSrv_ApiLoginXunleiOAuth_Handler,
		},
		{
			MethodName: "ApiLogin123panOAuth",
			Handler:    _CloudDriveFileSrv_ApiLogin123PanOAuth_Handler,
		},
		{
			MethodName: "APILoginWebDav",
			Handler:    _CloudDriveFileSrv_APILoginWebDav_Handler,
		},
		{
			MethodName: "APIAddLocalFolder",
			Handler:    _CloudDriveFileSrv_APIAddLocalFolder_Handler,
		},
		{
			MethodName: "RemoveCloudAPI",
			Handler:    _CloudDriveFileSrv_RemoveCloudAPI_Handler,
		},
		{
			MethodName: "GetAllCloudApis",
			Handler:    _CloudDriveFileSrv_GetAllCloudApis_Handler,
		},
		{
			MethodName: "GetCloudAPIConfig",
			Handler:    _CloudDriveFileSrv_GetCloudAPIConfig_Handler,
		},
		{
			MethodName: "SetCloudAPIConfig",
			Handler:    _CloudDriveFileSrv_SetCloudAPIConfig_Handler,
		},
		{
			MethodName: "GetSystemSettings",
			Handler:    _CloudDriveFileSrv_GetSystemSettings_Handler,
		},
		{
			MethodName: "SetSystemSettings",
			Handler:    _CloudDriveFileSrv_SetSystemSettings_Handler,
		},
		{
			MethodName: "SetDirCacheTimeSecs",
			Handler:    _CloudDriveFileSrv_SetDirCacheTimeSecs_Handler,
		},
		{
			MethodName: "GetEffectiveDirCacheTimeSecs",
			Handler:    _CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_Handler,
		},
		{
			MethodName: "ForceExpireDirCache",
			Handler:    _CloudDriveFileSrv_ForceExpireDirCache_Handler,
		},
		{
			MethodName: "GetOpenFileTable",
			Handler:    _CloudDriveFileSrv_GetOpenFileTable_Handler,
		},
		{
			MethodName: "GetDirCacheTable",
			Handler:    _CloudDriveFileSrv_GetDirCacheTable_Handler,
		},
		{
			MethodName: "GetReferencedEntryPaths",
			Handler:    _CloudDriveFileSrv_GetReferencedEntryPaths_Handler,
		},
		{
			MethodName: "GetTempFileTable",
			Handler:    _CloudDriveFileSrv_GetTempFileTable_Handler,
		},
		{
			MethodName: "GetCloudDrive1UserData",
			Handler:    _CloudDriveFileSrv_GetCloudDrive1UserData_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _CloudDriveFileSrv_RestartService_Handler,
		},
		{
			MethodName: "ShutdownService",
			Handler:    _CloudDriveFileSrv_ShutdownService_Handler,
		},
		{
			MethodName: "HasUpdate",
			Handler:    _CloudDriveFileSrv_HasUpdate_Handler,
		},
		{
			MethodName: "CheckUpdate",
			Handler:    _CloudDriveFileSrv_CheckUpdate_Handler,
		},
		{
			MethodName: "DownloadUpdate",
			Handler:    _CloudDriveFileSrv_DownloadUpdate_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _CloudDriveFileSrv_UpdateSystem_Handler,
		},
		{
			MethodName: "TestUpdate",
			Handler:    _CloudDriveFileSrv_TestUpdate_Handler,
		},
		{
			MethodName: "GetMetaData",
			Handler:    _CloudDriveFileSrv_GetMetaData_Handler,
		},
		{
			MethodName: "GetOriginalPath",
			Handler:    _CloudDriveFileSrv_GetOriginalPath_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _CloudDriveFileSrv_ChangePassword_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _CloudDriveFileSrv_CreateFile_Handler,
		},
		{
			MethodName: "CloseFile",
			Handler:    _CloudDriveFileSrv_CloseFile_Handler,
		},
		{
			MethodName: "WriteToFile",
			Handler:    _CloudDriveFileSrv_WriteToFile_Handler,
		},
		{
			MethodName: "GetPromotions",
			Handler:    _CloudDriveFileSrv_GetPromotions_Handler,
		},
		{
			MethodName: "UpdatePromotionResult",
			Handler:    _CloudDriveFileSrv_UpdatePromotionResult_Handler,
		},
		{
			MethodName: "GetCloudDrivePlans",
			Handler:    _CloudDriveFileSrv_GetCloudDrivePlans_Handler,
		},
		{
			MethodName: "JoinPlan",
			Handler:    _CloudDriveFileSrv_JoinPlan_Handler,
		},
		{
			MethodName: "BindCloudAccount",
			Handler:    _CloudDriveFileSrv_BindCloudAccount_Handler,
		},
		{
			MethodName: "TransferBalance",
			Handler:    _CloudDriveFileSrv_TransferBalance_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _CloudDriveFileSrv_ChangeEmail_Handler,
		},
		{
			MethodName: "GetBalanceLog",
			Handler:    _CloudDriveFileSrv_GetBalanceLog_Handler,
		},
		{
			MethodName: "CheckActivationCode",
			Handler:    _CloudDriveFileSrv_CheckActivationCode_Handler,
		},
		{
			MethodName: "ActivatePlan",
			Handler:    _CloudDriveFileSrv_ActivatePlan_Handler,
		},
		{
			MethodName: "CheckCouponCode",
			Handler:    _CloudDriveFileSrv_CheckCouponCode_Handler,
		},
		{
			MethodName: "GetReferralCode",
			Handler:    _CloudDriveFileSrv_GetReferralCode_Handler,
		},
		{
			MethodName: "BackupGetAll",
			Handler:    _CloudDriveFileSrv_BackupGetAll_Handler,
		},
		{
			MethodName: "BackupGetStatus",
			Handler:    _CloudDriveFileSrv_BackupGetStatus_Handler,
		},
		{
			MethodName: "BackupAdd",
			Handler:    _CloudDriveFileSrv_BackupAdd_Handler,
		},
		{
			MethodName: "BackupRemove",
			Handler:    _CloudDriveFileSrv_BackupRemove_Handler,
		},
		{
			MethodName: "BackupUpdate",
			Handler:    _CloudDriveFileSrv_BackupUpdate_Handler,
		},
		{
			MethodName: "BackupAddDestination",
			Handler:    _CloudDriveFileSrv_BackupAddDestination_Handler,
		},
		{
			MethodName: "BackupRemoveDestination",
			Handler:    _CloudDriveFileSrv_BackupRemoveDestination_Handler,
		},
		{
			MethodName: "BackupSetEnabled",
			Handler:    _CloudDriveFileSrv_BackupSetEnabled_Handler,
		},
		{
			MethodName: "BackupSetFileSystemWatchEnabled",
			Handler:    _CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_Handler,
		},
		{
			MethodName: "BackupUpdateStrategies",
			Handler:    _CloudDriveFileSrv_BackupUpdateStrategies_Handler,
		},
		{
			MethodName: "BackupRestartWalkingThrough",
			Handler:    _CloudDriveFileSrv_BackupRestartWalkingThrough_Handler,
		},
		{
			MethodName: "CanAddMoreBackups",
			Handler:    _CloudDriveFileSrv_CanAddMoreBackups_Handler,
		},
		{
			MethodName: "GetMachineId",
			Handler:    _CloudDriveFileSrv_GetMachineId_Handler,
		},
		{
			MethodName: "GetOnlineDevices",
			Handler:    _CloudDriveFileSrv_GetOnlineDevices_Handler,
		},
		{
			MethodName: "KickoutDevice",
			Handler:    _CloudDriveFileSrv_KickoutDevice_Handler,
		},
		{
			MethodName: "ListLogFiles",
			Handler:    _CloudDriveFileSrv_ListLogFiles_Handler,
		},
		{
			MethodName: "SyncFileChangesFromCloud",
			Handler:    _CloudDriveFileSrv_SyncFileChangesFromCloud_Handler,
		},
		{
			MethodName: "StartCloudEventListener",
			Handler:    _CloudDriveFileSrv_StartCloudEventListener_Handler,
		},
		{
			MethodName: "StopCloudEventListener",
			Handler:    _CloudDriveFileSrv_StopCloudEventListener_Handler,
		},
		{
			MethodName: "WalkThroughFolderTest",
			Handler:    _CloudDriveFileSrv_WalkThroughFolderTest_Handler,
		},
		{
			MethodName: "GetWebhookConfigTemplate",
			Handler:    _CloudDriveFileSrv_GetWebhookConfigTemplate_Handler,
		},
		{
			MethodName: "GetWebhookConfigs",
			Handler:    _CloudDriveFileSrv_GetWebhookConfigs_Handler,
		},
		{
			MethodName: "AddWebhookConfig",
			Handler:    _CloudDriveFileSrv_AddWebhookConfig_Handler,
		},
		{
			MethodName: "RemoveWebhookConfig",
			Handler:    _CloudDriveFileSrv_RemoveWebhookConfig_Handler,
		},
		{
			MethodName: "ChangeWebhookConfig",
			Handler:    _CloudDriveFileSrv_ChangeWebhookConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSubFiles",
			Handler:       _CloudDriveFileSrv_GetSubFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSearchResults",
			Handler:       _CloudDriveFileSrv_GetSearchResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LocalGetSubFiles",
			Handler:       _CloudDriveFileSrv_LocalGetSubFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILogin115QRCode",
			Handler:       _CloudDriveFileSrv_APILogin115QRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILogin115OpenQRCode",
			Handler:       _CloudDriveFileSrv_APILogin115OpenQRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILoginAliyunDriveQRCode",
			Handler:       _CloudDriveFileSrv_APILoginAliyunDriveQRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILogin189QRCode",
			Handler:       _CloudDriveFileSrv_APILogin189QRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushTaskChange",
			Handler:       _CloudDriveFileSrv_PushTaskChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushMessage",
			Handler:       _CloudDriveFileSrv_PushMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteToFileStream",
			Handler:       _CloudDriveFileSrv_WriteToFileStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/pb/CloudDrive.proto",
}
